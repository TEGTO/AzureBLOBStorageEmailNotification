@page "/"
@using ReenbitTestTask.Models
@using ReenbitTestTask.Services
@rendermode InteractiveServer
@inject IFileCloudManagerService fileCloudManager

<PageTitle>Home</PageTitle>

<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="EmailModel" OnValidSubmit="SendFile" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="title" class="form-label">Email:</label>
                <InputText id="email" @bind-Value="EmailModel.EmailAdress" class="form-control" />
                <ValidationMessage For="() => EmailModel" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="fileUpload" class="form-label">Upload .docx File:</label>
                <InputFile id="fileUpload" class="form-control" OnChange="HandleSelection" accept=".docx" required />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
            @if (!showSuccessMessage && !string.IsNullOrEmpty(submitError))
            {
                <div class="alert alert-danger mt-3" role="alert">
                    @submitError
                </div>
            }
            @if (showSuccessMessage)
            {
                <div class="alert alert-success mt-3" role="alert">
                    Operation successful!
                </div>
            }
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    public EmailDistributionModel EmailModel { get; set; } = new EmailDistributionModel();

    private IBrowserFile? selectedFile;
    private bool showSuccessMessage = false;
    private string submitError;

    public async Task SendFile()
    {
        showSuccessMessage = false;
        if (selectedFile != null)
        {
            try
            {
                await fileCloudManager.UploadFileAsync(selectedFile, EmailModel.EmailAdress);
                showSuccessMessage = true;
                submitError = string.Empty;
            }
            catch (Exception ex)
            {
                submitError = $"{ex.Message}";
            }
        }
    }
    private void HandleSelection(InputFileChangeEventArgs e) =>
        selectedFile = e.File;
}
